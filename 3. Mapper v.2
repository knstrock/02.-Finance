import tkinter as tk
from tkinter import ttk, filedialog
import pandas as pd

class MappingApp(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title("Mapping App")
        self.geometry("1000x600")

        self.create_widgets()

    def create_widgets(self):
        self.create_first_screen()
        self.create_second_screen()
        self.create_third_screen()
        self.create_mapping_buttons()
        self.create_export_button()

    def create_first_screen(self):
        self.first_frame = ttk.Frame(self)
        self.first_frame.grid(column=0, row=0, padx=10, pady=10)

        ttk.Label(self.first_frame, text="First Screen").grid(column=0, row=0)

        self.first_treeview = ttk.Treeview(self.first_frame, columns=("Name", "Value"), show="headings")
        self.first_treeview.grid(column=0, row=1)
        self.first_treeview.heading("Name", text="Name")
        self.first_treeview.heading("Value", text="Value")

        ttk.Button(self.first_frame, text="Open Excel File", command=self.load_first_screen_data).grid(column=0, row=2)

    def load_first_screen_data(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            data = pd.read_excel(file_path)
            self.first_treeview.delete(*self.first_treeview.get_children())
            for _, row in data.iterrows():
                self.first_treeview.insert("", tk.END, values=(row["Name"], row["Value"]))

    def create_second_screen(self):
        self.second_frame = ttk.Frame(self)
        self.second_frame.grid(column=1, row=0, padx=10, pady=10)

        ttk.Label(self.second_frame, text="Second Screen").grid(column=0, row=0)

        self.second_treeview = ttk.Treeview(self.second_frame, columns=("Structure", "code"), show="headings")
        self.second_treeview.grid(column=0, row=1)
        self.second_treeview.heading("Structure", text="Structure")
        self.second_treeview.heading("code", text="Code")

        ttk.Button(self.second_frame, text="Open Structure File", command=self.load_structure_data).grid(column=0, row=2)


def load_structure_data(self):
    file_path = filedialog.askopenfilename()
    if file_path:
        structure_data = pd.read_excel(file_path)
        self.second_treeview.delete(*self.second_treeview.get_children())
        for _, row in structure_data.iterrows():
            self.second_treeview.insert("", tk.END, values=(row["Structure"], row["Code"]))


def create_third_screen(self):
    self.third_frame = ttk.Frame(self)
    self.third_frame.grid(column=2, row=0, padx=10, pady=10)

    ttk.Label(self.third_frame, text="Third Screen").grid(column=0, row=0)

    self.mapping_treeview = ttk.Treeview(self.third_frame, columns=("code", "name", "value"), show="tree")
    self.mapping_treeview.grid(column=0, row=1)
    self.mapping_treeview.column("#0", width=300)

    self.mapping_treeview.tag_configure("bold", font=("Arial", 10, "bold"))
    self.mapping_treeview.tag_configure("dim", foreground="#999999")


def create_mapping_buttons(self):
    self.map_button = ttk.Button(self, text="Mapping", command=self.map_selected_items)
    self.map_button.grid(column=2, row=1, padx=10, pady=10)

    self.unmap_button = ttk.Button(self, text="Unmapping", command=self.unmap_selected_items)
    self.unmap_button.grid(column=3, row=1, padx=10, pady=10)


def map_selected_items(self):
    first_selected_item = self.first_treeview.selection()
    second_selected_item = self.second_treeview.selection()

    if first_selected_item and second_selected_item:
        first_values = self.first_treeview.item(first_selected_item, "values")
        second_values = self.second_treeview.item(second_selected_item, "values")

        code, structure = second_values
        name, value = first_values

        # Insert the mapping into the third_treeview
        # You should implement your own logic for inserting items in the correct hierarchy
        self.mapping_treeview.insert("", tk.END, text=structure, values=(code, name, value))

        # Dim the selected items in the first and second treeviews
        self.first_treeview.item(first_selected_item, tags=("dim",))
        self.second_treeview.item(second_selected_item, tags=("dim",))

    def unmap_selected_items(self):
        selected_item = self.mapping_treeview.selection()

        if selected_item:
            values = self.mapping_treeview.item(selected_item, "values")
            code, name, value = values

            # Find the original items in the first and second treeviews and undim them
            for item in self.first_treeview.get_children():
                item_values = self.first_treeview.item(item, "values")
                if item_values[0] == name and item_values[1] == value:
                    self.first_treeview.item(item, tags=())

            for item in self.second_treeview.get_children():
                item_values = self.second_treeview.item(item, "values")
                if item_values[1] == code:
                    self.second_treeview.item(item, tags=())

            # Remove the item from the third_treeview
            self.mapping_treeview.delete(selected_item)

    def create_export_button(self):
        self.export_button = ttk.Button(self, text="Export to Excel", command=self.export_to_excel)
        self.export_button.grid(column=4, row=1, padx=10, pady=10)

    def export_to_excel(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx")
        if file_path:
            data = []
            for item in self.mapping_treeview.get_children():
                values = self.mapping_treeview.item(item, "values")
                code, name, value = values
                structure = self.mapping_treeview.item(item, "text")
                data.append((code, structure, name, value))

                df = pd.DataFrame(data, columns=["CODE", "STRUCTURE", "Name", "Value"])

                # Save the DataFrame to an Excel file
                writer = pd.ExcelWriter(file_path, engine='xlsxwriter')
                df.to_excel(writer, index=False, sheet_name='Sheet1')

                # Adjust column widths to fit the content
                for idx, col in enumerate(df):
                    series = df[col]
                    max_len = max(series.astype(str).map(len).max(), len(str(series.name))) + 1
                    writer.sheets['Sheet1'].set_column(idx, idx, max_len)

                writer.save()

        if __name__ == "__main__":
            app = MappingApp()
            app.mainloop()
