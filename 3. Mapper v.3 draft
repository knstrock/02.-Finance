import tkinter as tk
from tkinter import ttk, filedialog
import pandas as pd
from pandas import DataFrame
from typing import Dict, Any

class MappingApp(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title("Mapping App")
        self.geometry("800x560")

        self.create_widgets()

    def create_widgets(self):
        self.create_first_screen()
        self.create_second_screen()
        self.create_third_screen()
        self.create_mapping_buttons()
        self.create_export_button()

    def create_first_screen(self):
        self.first_frame = ttk.Frame(self)
        self.first_frame.place(x=20, y=0, width=230, height=300)

        ttk.Label(self.first_frame, text="PARAMETERS").grid(column=0, row=0)

        self.first_treeview = ttk.Treeview(self.first_frame, columns=("Name", "Value"), show="headings")
        self.first_treeview.grid(column=0, row=1)
        self.first_treeview.heading("Name", text="Name", command=lambda: self.sort_column(self.first_treeview, "Name", False))
        self.first_treeview.heading("Value", text="Value", command=lambda: self.sort_column(self.first_treeview, "Value", False))
        # Создайте вертикальный ползунок и привяжите его к первому Treeview
        self.first_scrollbar = ttk.Scrollbar(self.first_frame, orient=tk.VERTICAL, command=self.first_treeview.yview)
        self.first_scrollbar.grid(column=1, row=1, sticky="ns")

        # Свяжите ползунок с Treeview
        self.first_treeview.configure(yscrollcommand=self.first_scrollbar.set)

        # Set initial and fixed column widths
        self.first_treeview.column("Name", width=150, minwidth=150, stretch=True)
        self.first_treeview.column("Value", width=50, minwidth=50, stretch=False)

        # Расчет диффа
        self.difference_label = ttk.Label(self.first_frame, text="Difference: 0")
        self.difference_label.grid(column=0, row=3)

        ttk.Button(self.first_frame, text="Open Excel File", command=self.load_first_screen_data).grid(column=0, row=2)

    def sort_column(self, treeview, column, reverse):
        items = treeview.get_children()
        sorted_items = sorted(items, key=lambda item: treeview.set(item, column), reverse=reverse)

        for index, item in enumerate(sorted_items):
            treeview.move(item, '', index)

        treeview.heading(column, command=lambda: self.sort_column(treeview, column, not reverse))

    def load_first_screen_data(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            data = pd.read_excel(file_path)
            self.first_treeview.delete(*self.first_treeview.get_children())
            total_value = 0
            for _, row in data.iterrows():
                self.first_treeview.insert("", tk.END, values=(row["Name"], row["Value"]))
                total_value += row["Value"]
            # Обновите текст метки Difference
            self.difference_label.config(text=f"Difference: {total_value:.2f}")

    def create_second_screen(self):
        self.second_frame = ttk.Frame(self)
        self.second_frame.place(x=285, y=0, width=800, height=300)

        ttk.Label(self.second_frame, text="MAPPING").grid(column=0, row=0)

        self.second_treeview = ttk.Treeview(self.second_frame, columns=("Structure", "Code"), show="headings")
        self.second_treeview.grid(column=0, row=1)
        self.second_treeview.heading("Structure", text="Structure")
        self.second_treeview.heading("Code", text="Code")

        # Set initial and fixed column widths
        self.second_treeview.column("Structure", width=500, minwidth=500, stretch=True)  # Измените ширину и stretch
        self.second_treeview.column("Code", width=80, minwidth=80, stretch=False)  # Измените ширину

        ttk.Button(self.second_frame, text="Open Structure File", command=self.load_structure_data).grid(column=0,row=2)

    def create_second_screen(self):
        self.second_frame = ttk.Frame(self)
        self.second_frame.place(x=285, y=0, width=800, height=300)

        ttk.Label(self.second_frame, text="MAPPING").grid(column=0, row=0)

        self.second_treeview = ttk.Treeview(self.second_frame, columns=("Structure", "code"), show="headings")
        self.second_treeview.grid(column=0, row=1)
        self.second_treeview.heading("Structure", text="Structure")
        self.second_treeview.heading("code", text="Code")

        # Set initial and fixed column widths
        self.second_treeview.column("Structure", width=450, minwidth=450, stretch=False)
        self.second_treeview.column("code", width=40, minwidth=40, stretch=False)

        ttk.Button(self.second_frame, text="Open Structure File", command=self.load_structure_data).grid(column=0, row=2)

    def create_structure_dict(self, df):
        structure_dict = {}
        for _, row in df.iterrows():
            parts = row[0].split("\\")
            code = row[1]
            current_level = structure_dict
            for part in parts:
                if part not in current_level:
                    current_level[part] = {"_code": code, "children": {}}
                    code = None
                current_level = current_level[part]["children"]
        return structure_dict

    def build_tree(self, tree_data):
        self.second_treeview.delete(*self.second_treeview.get_children())
        self.populate_treeview("", tree_data)

    def load_structure_data(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            structure_data: DataFrame = pd.read_excel(file_path, header=None)  # Измените заголовок на None

            # Выводим названия столбцов
            print(structure_data.head())  # Измените на .head()

            tree_data = self.process_data(structure_data)
            self.build_tree(tree_data)

    def process_data(self, data: DataFrame) -> Dict[str, Any]:
        structure_dict = {}
        for _, row in data.iterrows():
            parts = row[0].split("\\")
            code = row[1]
            current_level = structure_dict
            for part in parts:
                if part not in current_level:
                    current_level[part] = {"_code": code, "children": {}}
                    code = None
                current_level = current_level[part]["children"]
        return structure_dict

    def populate_treeview(self, parent_item_id: str, structure_dict: Dict[str, Any]):
        for key, value in structure_dict.items():
            if key == "_code":
                continue

            item_id = self.tree.insert(
                parent_item_id,
                "end",
                text=key,
                values=(value["_code"],)
            )

            if "children" in value:
                self.populate_treeview(item_id, value["children"])

    def create_third_screen(self):
        self.third_frame = ttk.Frame(self)
        self.third_frame.place(x=20, y=300, width=800, height=300)

        ttk.Label(self.third_frame, text="STRUCTURE VIEW").grid(column=0, row=0)

        self.mapping_treeview = ttk.Treeview(self.third_frame, columns=("code", "name", "value"), show="tree")
        self.mapping_treeview.grid(column=0, row=1)
        self.mapping_treeview.column("#0", width=0)

        self.mapping_treeview.tag_configure("bold", font=("Arial", 10, "bold"))
        self.mapping_treeview.tag_configure("dim", foreground="#999999")

    def create_mapping_buttons(self):
        self.map_button = ttk.Button(self, text="V", command=self.map_selected_items)
        self.map_button.place(x=240, y=80, width=30, height=30)

        self.unmap_button = ttk.Button(self, text="X", command=self.unmap_selected_items)
        self.unmap_button.place(x=240, y=120, width=30, height=30)

    def map_selected_items(self):
        first_selected_item = self.first_treeview.selection()
        second_selected_item = self.second_treeview.selection()

        if first_selected_item and second_selected_item:
            first_values = self.first_treeview.item(first_selected_item[0], "values")
            second_values = self.second_treeview.item(second_selected_item[0], "values")

            code, structure = second_values
            name, value = first_values

            # Insert the mapping into the third_treeview
            # You should implement your own logic for inserting items in the correct hierarchy
            self.mapping_treeview.insert("", tk.END, text=structure, values=(code, name, value))

            # Dim the selected items in the first and second treeviews
            self.first_treeview.item(first_selected_item[0], tags=("dim",))
            self.second_treeview.item(second_selected_item[0], tags=("dim",))

    def unmap_selected_items(self):
        selected_item = self.mapping_treeview.selection()

        if selected_item:
            values = self.mapping_treeview.item(selected_item, "values")
            code, name, value = values

            # Find the original items in the first and second treeviews and undim them
            for item in self.first_treeview.get_children():
                item_values = self.first_treeview.item(item, "values")
                if item_values[0] == name and item_values[1] == value:
                    self.first_treeview.item(item, tags=())

            for item in self.second_treeview.get_children():
                item_values = self.second_treeview.item(item, "values")
                if item_values[1] == code:
                    self.second_treeview.item(item, tags=())

            # Remove the item from the third_treeview
            self.mapping_treeview.delete(selected_item)

    def create_export_button(self):
        self.export_button = ttk.Button(self, text="Export to Excel", command=self.export_to_excel)
        self.export_button.place(x=285, y=525, width=100, height=25)

    def export_to_excel(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx")
        if file_path:
            data = []
            for item in self.mapping_treeview.get_children():
                values = self.mapping_treeview.item(item, "values")
                code, name, value = values
                structure = self.mapping_treeview.item(item, "text")
                data.append((code, structure, name, value))

            df = pd.DataFrame(data, columns=["CODE", "STRUCTURE", "Name", "Value"])

            # Save the DataFrame to an Excel file
            writer = pd.ExcelWriter(file_path, engine='xlsxwriter')
            df.to_excel(writer, index=False, sheet_name='Sheet1')

            # Adjust column widths to fit the content
            for idx, col in enumerate(df):
                series = df[col]
                max_len = max(series.astype(str).map(len).max(), len(str(series.name))) + 1
                writer.sheets['Sheet1'].set_column(idx, idx, max_len)

            writer.save()

if __name__ == "__main__":
    app = MappingApp()
    app.mainloop()
