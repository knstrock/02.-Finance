from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
import telegram.error

# Initialize Google Sheets API
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
credentials = Credentials.from_service_account_file('total-vertex-397319-a26ac8a48653.json', scopes=SCOPES)
service = build('sheets', 'v4', credentials=credentials)
sheet = service.spreadsheets()


def start(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    message = update.message or query.message  # –ò—Å–ø–æ–ª—å–∑—É–µ–º query.message, –µ—Å–ª–∏ update.message None

    keyboard = [
        [InlineKeyboardButton("üìã–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="show_events")],
        [InlineKeyboardButton("üë§–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = ('üé•–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–ª—å—Ç–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –õ–∏–º–∞—Å—Å–æ–ª–∞. \n'
            '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞—Ñ–∏—à–µ–π\n'
            '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å: —Ä–µ–≤–æ–ª—é—Ç @aleksa74gd\n'
            '–ß–∞—Ç: https://t.me/outdoor_cinema_cy\n'
            '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –∞—Ä–µ–Ω–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è @limarockstar\n'
            'üá®üáæ–ö–∏–ø—Ä, –õ–∏–º–∞—Å—Å–æ–ª\n'
            '–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:')

    if query:
        query.edit_message_text(text, reply_markup=reply_markup)
    else:
        message.reply_text(text, reply_markup=reply_markup)


def show_personal_cabinet(update: Update, context: CallbackContext):
    delete_last_message(context, update)
    query = update.callback_query
    user = update.effective_user
    user_id = f"@{user.username}" if user.username else str(user.id)

    user_bookings = fetch_user_bookings(user_id)

    text = f"üë§–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n–ü—Ä–æ—Ñ–∏–ª—å: {user.full_name}\n"

    has_active_bookings = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    if user_bookings:
        for event_name, payment_status in user_bookings.items():
            for status, tickets_count in payment_status.items():
                if tickets_count > 0:
                    if not has_active_bookings:
                        text += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                    text += f"üé¨{event_name}\n{status}: {tickets_count} –±–∏–ª–µ—Ç–∞\n"
                    has_active_bookings = True

    keyboard = [
        [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]

    if has_active_bookings:
        for event_name in user_bookings.keys():
            keyboard.append([InlineKeyboardButton(f"‚ùå–û—Ç–º–µ–Ω–∏—Ç—å {event_name}", callback_data=f"cancel:{event_name}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup)



def show_events(update: Update, context: CallbackContext, message_id=None):
    events = fetch_events()
    registered_count = fetch_registered_users_count()
    keyboard = []
    for event in events:
        event_name = event['name']
        event_date = event['date']
        count = registered_count.get(event_name, 0)
        button_text = f"{event_date} - {event_name} ({count} –º–µ—Å—Ç –∑–∞–Ω—è—Ç–æ)"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"event:{event_name}")])
    keyboard.append([InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="main_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    if message_id:
        context.bot.edit_message_text(
            'üé•–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–ª—å—Ç–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –õ–∏–º–∞—Å—Å–æ–ª–∞. \n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞—Ñ–∏—à–µ–π\n–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å: —Ä–µ–≤–æ–ª—é—Ç @aleksa74gd\n–ß–∞—Ç: https://t.me/outdoor_cinema_cy\n–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –∞—Ä–µ–Ω–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è @limarockstar\nüá®üáæ–ö–∏–ø—Ä, –õ–∏–º–∞—Å—Å–æ–ª\n–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:',
            chat_id=update.effective_chat.id,
            message_id=message_id,
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text(
            'üé•–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–ª—å—Ç–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –õ–∏–º–∞—Å—Å–æ–ª–∞. \n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞—Ñ–∏—à–µ–π\n–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å: —Ä–µ–≤–æ–ª—é—Ç @aleksa74gd\n–ß–∞—Ç: https://t.me/outdoor_cinema_cy\n–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –∞—Ä–µ–Ω–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è @limarockstar\nüá®üáæ–ö–∏–ø—Ä, –õ–∏–º–∞—Å—Å–æ–ª\n–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:',
            reply_markup=reply_markup
        )

# Telegram Bot: Callback function
def event_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    event_type = query.data.split(":", 1)[0]
    event_name = query.data.split(":", 1)[1] if ":" in query.data else None
    user = update.effective_user

    if event_type == 'event':
        delete_last_message(context, update)
        event = next((e for e in fetch_events() if e['name'] == event_name), None)
        if event:
            keyboard = [
                [InlineKeyboardButton("üìù–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"register:{event_name}")],
                [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(f"üçø{event_name}:\n\b{event['description']}",
                                    reply_markup=reply_markup)
    elif event_type == 'show_events':
        show_events(update, context, message_id=query.message.message_id)
    elif event_type == 'personal_cabinet':
        show_personal_cabinet(update, context)
    elif event_type == 'main_menu':
        delete_last_message(context, update)
        start(update, context)
    elif event_type == 'cancel':
        delete_last_message(context, update)
        cancel_booking(user, event_name)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏
        query.edit_message_text(f"–ë—Ä–æ–Ω—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_name} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        show_personal_cabinet(update, context)  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

    elif event_type == 'register':
        delete_last_message(context, update)
        keyboard = [
            [InlineKeyboardButton("1", callback_data=f"seats:1:{event_name}"),
             InlineKeyboardButton("2", callback_data=f"seats:2:{event_name}"),
             InlineKeyboardButton("3", callback_data=f"seats:3:{event_name}")],
            [InlineKeyboardButton("4", callback_data=f"seats:4:{event_name}"),
             InlineKeyboardButton("5", callback_data=f"seats:5:{event_name}"),
             InlineKeyboardButton("6", callback_data=f"seats:6:{event_name}")],
            [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(f"üê∞–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ {event_name}?", reply_markup=reply_markup)
    elif event_type == 'seats':
        delete_last_message(context, update)
        parts = query.data.split(":")
        seats = parts[1]
        event_name = ":".join(parts[2:])  # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ, —á—Ç–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
        keyboard = [
            [InlineKeyboardButton("üí∏–ù–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ –º–µ—Å—Ç–µ", callback_data=f"pay_cash:{event_name}:{seats}")],
            [InlineKeyboardButton("üí≥–û–Ω–ª–∞–π–Ω", callback_data=f"pay_online:{event_name}:{seats}")],
            [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(f"üê∞–ö–∞–∫ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å {seats} –º–µ—Å—Ç –Ω–∞ —Ñ–∏–ª—å–º {event_name}?", reply_markup=reply_markup)


    elif event_type in ['pay_cash', 'pay_online']:
        delete_last_message(context, update)
        parts = query.data.split(":")
        seats = parts[-1]
        event_name = ":".join(
            parts[1:-1])  # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ, —á—Ç–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
        status = 'üí∏–Ω–∞–ª–∏—á–Ω—ã–º–∏' if event_type == 'pay_cash' else 'üí≥–æ–Ω–ª–∞–π–Ω'
        add_or_update_registration_to_sheet(user, event_name, status, seats)
        last_message_id = context.user_data.get('last_message_id')
        if last_message_id:
            context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_message_id)
            del context.user_data['last_message_id']
        if event_type == 'pay_cash':
            text = f"–ú—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ üìù –≤–∞–º {seats} –º–µ—Å—Ç –Ω–∞ —Ñ–∏–ª—å–º: {event_name}.\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {status}"
            keyboard = [[InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data=f"back:{event_name}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(text, reply_markup=reply_markup)

        else:
            text = ("–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n"
                    "1. Telegram Bot: https://t.me/outcy/159\n"
                    "2. Revolut: @aleksa74gd\n"
                    "3. Patreon: https://www.patreon.com/OUTDOORCINEMA\n"
                    "–ü–æ—Å–ª–µ –ø–∏—à–∏—Ç–µ üë©üèª @qeaqa, —á—Ç–æ–±—ã –≤–∞—Å –≤–Ω–µ—Å–ª–∏ –≤ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–∏–¥–∞–π—Ç–µ –µ–π —Å–∫—Ä–∏–Ω —ç–∫—Ä–∞–Ω–∞")
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_status:{event_name}")],
                [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data=f"back:{event_name}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(text, reply_markup=reply_markup)

    elif event_type == 'check_status':
        delete_last_message(context, update)
        text = f"üé¨–°—Ç–∞—Ç—É—Å –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_name} –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è. \n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç üë©üèª @qeaqa"
        keyboard = [[InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data=f"back:{event_name}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(text, reply_markup=reply_markup)

    elif event_type == 'back':
        delete_last_message(context, update)
        add_or_update_registration_to_sheet(user, event_name, 'back')
        show_events(update, context, message_id=query.message.message_id)

# Telegram Bot: Show Events List
def fetch_user_bookings(user_id):
    SPREADSHEET_ID = '1MTV8EcGxH4LGVPZdsJeOAzfDLvo7D0MVN3itdaG5FzQ'
    RANGE_NAME = 'Sheet2!A2:D'
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME).execute()
    values = result.get('values', [])

    user_bookings = {}
    for row in values:
        if row[0] == user_id:
            event_name = row[1]
            payment_status = row[2]
            if payment_status == 'back':  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'back'
                continue
            tickets_count = int(row[3])
            if event_name not in user_bookings:
                user_bookings[event_name] = {}
            user_bookings[event_name][payment_status] = tickets_count

    return user_bookings
def cancel_booking(user, event_name):
    user_identifier = f"@{user.username}" if user.username else str(user.id)
    SPREADSHEET_ID = '1MTV8EcGxH4LGVPZdsJeOAzfDLvo7D0MVN3itdaG5FzQ'
    RANGE_NAME = 'Sheet2!A2:D'
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME).execute()
    values = result.get('values', [])
    for i, row in enumerate(values):
        if row[0] == user_identifier and row[1] == event_name:
            row[3] = "0"  # Setting the status to "0" to indicate cancellation
            row[1] = ""  # Setting the status to "" to indicate cancellation
            sheet.values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f'Sheet2!A{i + 2}:D{i + 2}',
                body={"values": [row]},
                valueInputOption='RAW'
            ).execute()
            break
def fetch_events():
    SPREADSHEET_ID = '1MTV8EcGxH4LGVPZdsJeOAzfDLvo7D0MVN3itdaG5FzQ'
    RANGE_NAME = 'Sheet1!A2:E10'
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME).execute()
    values = result.get('values', [])
    events = [{"date": row[0], "name": row[1], "description": row[2], "attachment": row[3] if len(row) > 3 else None} for row in values]
    return events

# Fetch registered users count for each event from Google Sheets
def fetch_registered_users_count():
    SPREADSHEET_ID = '1MTV8EcGxH4LGVPZdsJeOAzfDLvo7D0MVN3itdaG5FzQ'
    RANGE_NAME = 'Sheet2!A2:D'
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME).execute()
    values = result.get('values', [])
    event_count = {}
    for row in values:
        if len(row) >= 4 and row[2] in ['üí∏–Ω–∞–ª–∏—á–Ω—ã–º–∏', 'üí≥–æ–Ω–ª–∞–π–Ω']:
            event_name = row[1]
            seats = int(row[3])
            if event_name not in event_count:
                event_count[event_name] = 0
            event_count[event_name] += seats
    return event_count

# Add or Update registration to Google Sheets
def add_or_update_registration_to_sheet(user, event_name, status, seats=1):
    if seats is not None:
        seats = int(seats)
    user_identifier = f"@{user.username}" if user.username else str(user.id)
    SPREADSHEET_ID = '1MTV8EcGxH4LGVPZdsJeOAzfDLvo7D0MVN3itdaG5FzQ'
    RANGE_NAME = 'Sheet2!A2:D'
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME).execute()
    values = result.get('values', [])

    if status in ['üí∏–Ω–∞–ª–∏—á–Ω—ã–º–∏', 'üí≥–æ–Ω–ª–∞–π–Ω']:  # –ï—Å–ª–∏ —ç—Ç–æ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        new_row = [user_identifier, event_name, status, str(seats)]
        sheet.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME,
            body={"values": [new_row]},
            valueInputOption='RAW'
        ).execute()
    else:  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        found = False
        for i, row in enumerate(values):
            if row[0] == user_identifier and row[1] == event_name and status != 'back':
                row[2] = status
                row[3] = str(int(row[3]) + seats)
                sheet.values().update(
                    spreadsheetId=SPREADSHEET_ID,
                    range=f'Sheet2!A{i + 2}:D{i + 2}',
                    body={"values": [row]},
                    valueInputOption='RAW'
                ).execute()
                found = True
                break
        if not found or status == 'back':
            new_row = [user_identifier, event_name, status, str(seats)]
            sheet.values().append(
                spreadsheetId=SPREADSHEET_ID,
                range=RANGE_NAME,
                body={"values": [new_row]},
                valueInputOption='RAW'
            ).execute()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
def delete_last_message(context, update):
    last_message_id = context.user_data.get('last_message_id')
    if last_message_id:
        try:
            context.bot.delete_message(chat_id=update.effective_chat.id, message_id=last_message_id)
        except telegram.error.BadRequest:
            pass
        del context.user_data['last_message_id']

# Main function
def main() -> None:
    updater = Updater("6551047772:AAE3CNw2mvx1su-qN1AFqHaII49Vxbg3pCo")
    dp = updater.dispatcher
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CallbackQueryHandler(event_callback))
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
